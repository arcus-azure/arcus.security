parameters:
  dockerProjectName: ''

steps:
  - bash: |
      if [ -z "$PROJECT_NAME" ]; then
        echo "##vso[task.logissue type=error;]Missing template parameter \"dockerProjectName\""
        echo "##vso[task.complete result=Failed;]"
      fi
    env:
      PROJECT_NAME: ${{ parameters.dockerProjectName }}
  - task: UseDotNet@2
    displayName: 'Import .NET Core SDK ($(DotNet.Sdk.VersionBC))'
    inputs:
      packageType: 'sdk'
      version: '$(DotNet.Sdk.VersionBC)'
  - task: Docker@1
    displayName: 'Build Docker image from ${{ parameters.dockerProjectName }}'
    inputs:
      dockerFile: src/${{ parameters.dockerProjectName }}/Dockerfile
      imageName: '${{ parameters.dockerProjectName }}:$(Build.BuildId)'
      useDefaultContext: false
      buildContext: src
  - task: Docker@1
    displayName: 'Run new  project Docker image from ${{ parameters.dockerProjectName }}'
    inputs:
      command: 'Run an image'
      imageName: '${{ parameters.dockerProjectName }}:$(Build.BuildId)'
      containerName: '${{ parameters.dockerProjectName }}'
      ports: '$(Arcus.AzureFunctions.HttpPort):80'
  - template: 'templates/download-dapr.yml'
    parameters:
      targetFolder: '$(Build.SourcesDirectory)'
      daprBinVariableName: 'Arcus.Dapr.DaprBin'
  - template: 'templates/download-hashicorp-vault.yml'
    parameters:
      targetFolder: '$(Build.SourcesDirectory)'
      version: $(HashiCorp.Vault.Version)
      vaultBinVariableName: 'Arcus.HashiCorp.VaultBin'
  - template: test/run-integration-tests.yml@templates
    parameters:
      dotnetSdkVersion: '$(DotNet.Sdk.Version)'
      projectName: '$(Project).Tests.Integration'
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        docker logs ${{ parameters.dockerProjectName }}
      failOnStderr: true
    displayName: Show ${{ parameters.dockerProjectName }} logs
    condition: always()