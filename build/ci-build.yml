name: $(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src/*

pr:
  paths:
    include:
    - src/*
    - build/ci-build.yml

resources:
  repositories:
  - repository: templates
    type: github
    name: arcus-azure/azure-devops-templates
    endpoint: arcus-azure


variables:
  # 'Arcus_ServicePrincipal_AccessKey' is added as secret on build in Azure DevOps
  - group: 'Arcus Security - Integration Testing'
  - group: 'Arcus - GitHub Package Registry'
  - group: 'Build Configuration'
  # Always use fixed version for .NET Core SDK
  - name: 'DotNet.Sdk.Version'
    value: '2.2.105'
  - name: 'Project'
    value: 'Arcus.Security'

stages:
  - stage: Build
    jobs:
      - job: Compile
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DotNetCoreInstaller@0
            displayName: 'Import .NET Core SDK ($(DotNet.Sdk.Version))'
            inputs:
              version: '$(DotNet.Sdk.Version)'
          - task: DotNetCoreCLI@2
            displayName: 'Compile'
            inputs:
              projects: 'src/*.sln'
              arguments: '--configuration $(Build.Configuration)'
          - task: CopyFiles@2
            displayName: 'Copy build artifacts'
            inputs:
              contents: '**/?(bin|obj)/**'
              targetFolder: '$(Pipeline.Workspace)/build'
          - task: PublishPipelineArtifact@0
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(Pipeline.Workspace)/build'
              artifactName: Build

  - stage: UnitTests
    displayName: Unit Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: UnitTests
        displayName: 'Run unit tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: test/run-unit-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Unit'

  - stage: IntegrationTests
    displayName: Integration Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: IntegrationTests
        displayName: 'Run integration tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: test/run-integration-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Integration'
