name: $(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src/*

pr:
  paths:
    include:
    - src/*
    - build/ci-build.yml

parameters:
  - name: 'Package.Version.ManualTrigger'
    type: string
    default: 'preview'

resources:
  repositories:
    - repository: templates
      type: github
      name: arcus-azure/azure-devops-templates
      endpoint: arcus-azure

variables:
  # 'Arcus_ServicePrincipal_AccessKey' is added as secret on build in Azure DevOps
  - group: 'Arcus Security - Integration Testing'
  - group: 'Arcus - GitHub Package Registry'
  - group: 'Build Configuration'
  - template: ./variables/build.yml

stages:
  - stage: Build
    jobs:
      - job: Compile
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - template: 'nuget/determine-pr-version.yml@templates'
            parameters:
              manualTriggerVersion: ${{ parameters['Package.Version.ManualTrigger'] }}
          - task: UseDotNet@2
            displayName: 'Import .NET Core SDK ($(DotNet.Sdk.VersionBC))'
            inputs:
              packageType: 'sdk'
              version: '$(DotNet.Sdk.VersionBC)'
          - template: 'build/build-solution.yml@templates'
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              versionSuffix: '$(packageVersion)'
          - task: CopyFiles@2
            displayName: 'Copy build artifacts'
            inputs:
              contents: '**/?(bin|obj)/**'
              targetFolder: '$(Pipeline.Workspace)/build'
          - task: PublishPipelineArtifact@0
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(Pipeline.Workspace)/build'
              artifactName: Build

  - stage: UnitTests
    displayName: Unit Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: UnitTests
        displayName: 'Run unit tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - task: UseDotNet@2
            displayName: 'Import .NET Core SDK ($(DotNet.Sdk.VersionBC))'
            inputs:
              packageType: 'sdk'
              version: '$(DotNet.Sdk.VersionBC)'
          - template: test/run-unit-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Unit'

  - stage: IntegrationTests
    displayName: Integration Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: IntegrationTests
        displayName: 'Run integration tests'
        pool:
          vmImage: 'ubuntu-16.04'
        variables:
          Arcus.HashiCorp.VaultBin: '$(Build.SourcesDirectory)/vault'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - task: UseDotNet@2
            displayName: 'Import .NET Core SDK ($(DotNet.Sdk.VersionBC))'
            inputs:
              packageType: 'sdk'
              version: '$(DotNet.Sdk.VersionBC)'
          - powershell: |
              # New-Item $env:TARGET_FOLDER
              $vault_zip = "vault_$($env:VAULT_VERSION)_linux_amd64.zip"
              $vault_url = "https://releases.hashicorp.com/vault/$($env:VAULT_VERSION)/$vault_zip"
              $destination = "$($env:TARGET_FOLDER)/$vault_zip"
              if (!(Test-Path $destination)) {
                  Write-Output "Downloading $vault_url to $destination"
                  [Net.ServicePointManager]::SecurityProtocol = 'Tls12'
                  Invoke-WebRequest -Uri $vault_url -OutFile $vault_zip
                  ls
                  if (Test-Path $vault_zip) {
                    Write-Output "Downloaded .zip file to $vault_zip"
                  } else {
                    Write-Error "Could not find downloaded .zip file $vault_zip"
                  }
              }
              Expand-Archive -LiteralPath $vault_zip -DestinationPath $env:TARGET_FOLDER
              ls
              if (Test-Path "$($env:TARGET_FOLDER)/vault") {
                Write-Output "Extracted HashiCorp Vault to executatble file"
              } else {
                Write-Error "Could not find extracted HashiCorp Vault executatble file"
              }
            workingDirectory: $(Build.SourcesDirectory)
            env:
              TARGET_FOLDER: $(Build.SourcesDirectory)
              VAULT_VERSION: 1.5.2
            displayName: 'Download HashiCorp Vault'
          - bash: |
               chmod +x $VAULT_BIN
            env:
              VAULT_BIN: $(Arcus.HashiCorp.VaultBin)
            workingDirectory: $(Build.SourcesDirectory)
          - template: test/run-integration-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Integration'

  - stage: ReleaseToMyget
    displayName: 'Release to MyGet'
    dependsOn:
      - UnitTests
      - IntegrationTests
    condition: succeeded()
    jobs:
      - job: PushToMyGet
        displayName: 'Push to MyGet'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: nuget/publish-preview-package.yml@templates
