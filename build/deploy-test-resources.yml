name: Arcus Security - Deploy test resources

trigger: none
pr: none

parameters:
  - name: azureServiceConnection
    displayName: 'Azure service connection'
    type: string
    default: 'Azure Codit-Arcus Service Principal'
  - name: resourceGroupName
    displayName: 'Resource group name'
    default: arcus-security-dev-we-rg
  - name: keyVaultName
    displayName: 'Arcus.Security Key vault name'
    default: arcus-security-kv
  - name: variableGroupName
    displayName: 'Variable group name'
    default: Arcus Security - Integration Testing

variables:
  - template: ./variables/build.yml

resources:
  repositories:
    - repository: templates
      type: github
      name: arcus-azure/azure-devops-templates
      endpoint: arcus-azure

stages:
  - stage: Deploy
    jobs:
      - job: DeployBicep
        displayName: 'Deploy test resources'
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: AzureCLI@2
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            inputs:
              azureSubscription: '${{ parameters.azureServiceConnection }}'
              addSpnToEnvironment: true
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
                Install-Module -Name Arcus.Scripting.DevOps -AllowClobber

                $secretName = 'ArcusTestSecret'
                $secretValue = [System.Guid]::NewGuid().ToString()
                Set-AzDevOpsVariable -Name 'Arcus_KeyVault_TestSecretValue' -Value $secretValue

                $objectId = (az ad sp show --id $env:servicePrincipalId | ConvertFrom-Json).id

                $deployOutput = az deployment sub create `
                  --location westeurope `
                  --template-file ./build/templates/deploy-test-resources.bicep `
                  --parameters location=westeurope `
                  --parameters resourceGroupName=${{ parameters.resourceGroupName }} `
                  --parameters keyVaultName=${{ parameters.keyVaultName }} `
                  --parameters secretName=$secretName `
                  --parameters secretValue=$secretValue `
                  --parameters servicePrincipal_objectId=$objectId `  
                  | ConvertFrom-Json

                $env:ArmOutputs = ConvertTo-Json $deployOutput.properties.outputs
                Set-AzDevOpsArmOutputsToVariableGroup -VariableGroupName '${{ parameters.variableGroupName }}'

  - stage: Tests
    dependsOn: Deploy
    jobs:
      - job: InfraSmokeTests
        displayName: 'Smoke test infrastructure'
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: AzureCLI@2
            displayName: 'Run infra smoke tests'
            env:
              Arcus_KeyVault_TestSecretValue: $(Arcus_KeyVault_TestSecretValue)
            inputs:
              azureSubscription: '${{ parameters.azureServiceConnection }}'
              addSpnToEnvironment: true
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
                Install-Module -Name Az -Force -AllowClobber

                $clientSecret = ConvertTo-SecureString $env:servicePrincipalKey -AsPlainText -Force
                $pscredential = New-Object -TypeName System.Management.Automation.PSCredential($env:servicePrincipalId, $clientSecret)
                $tenantId = az account show --query tenantId -o tsv
                Connect-AzAccount -Credential $pscredential -TenantId $tenantId -ServicePrincipal

                $env:RESOURCEGROUP_NAME = '${{ parameters.resourceGroupName }}'
                $env:KEYVAULT_NAME = '${{ parameters.keyVaultName }}'
                $env:SECRET_NAME = 'ArcusTestSecret'
                $env:SECRET_VALUE = $env:Arcus_KeyVault_TestSecretValue

                Install-Module -Name Pester -Force -SkipPublisherCheck
                Invoke-Pester -Path './build/templates/run-infra-smoke-tests.ps1' -OutputFile testresults.xml -OutputFormat NUnitXml
          - task: PublishTestResults@2
            displayName: Publish infra smoke test results
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/testresults.xml'
              mergeTestResults: true