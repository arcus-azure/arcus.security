name: $(date:yyyyMMdd)$(rev:.r)

trigger: none
pr: none

resources:
  repositories:
    - repository: templates
      type: github
      name: arcus-azure/azure-devops-templates
      endpoint: arcus-azure

variables:
  - group: 'Arcus Security - Integration Testing'
  - group: 'Arcus - GitHub Package Registry'
  - group: 'Build Configuration'
  # Always use fixed version for .NET Core SDK
  - name: 'DotNet.Sdk.Version'
    value: '2.2.105'
  - name: 'Project'
    value: 'Arcus.Security'
  # 'Package.Version' is added as queue-time variable on build in Azure DevOps

stages:
  - stage: Build
    jobs:
      - job: Compile
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DotNetCoreInstaller@0
            displayName: 'Import .NET Core SDK ($(DotNet.Sdk.Version))'
            inputs:
              version: '$(DotNet.Sdk.Version)'
          - task: DotNetCoreCLI@2
            displayName: 'Compile'
            inputs:
              projects: 'src/*.sln'
              arguments: '--configuration $(Build.Configuration) /property:Version=$(Build.BuildNumber)'
          - task: CopyFiles@2
            displayName: 'Copy build artifacts'
            inputs:
              contents: '**/?(bin|obj)/**'
              targetFolder: '$(Pipeline.Workspace)/build'
          - task: PublishPipelineArtifact@0
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(Pipeline.Workspace)/build'
              artifactName: Build

  - stage: UnitTests
    displayName: Unit Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: UnitTests
        displayName: 'Run unit tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: test/run-unit-tests.yaml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Unit'

  - stage: IntegrationTests
    displayName: Integration Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: IntegrationTests
        displayName: 'Run integration tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: test/run-integration-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Integration'

  - stage: Release
    displayName: 'Release to NuGet.org'
    dependsOn: IntegrationTests
    condition: succeeded()
    jobs:
      - job: PushToNuGet
        displayName: 'Push to NuGet.org'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - task: GitHubRelease@0
            displayName: 'Create GitHub Release (Conditional Step)'
            inputs:
              gitHubConnection: 'GitHub (arcus-automation - OAuth)'
              repositoryName: 'arcus-azure/arcus.security'
              tagSource: manual
              tag: 'v$(Build.BuildNumber)'
              title: 'v$(Build.BuildNumber)'
              releaseNotesSource: input
              releaseNotes: |
                Install new version via [NuGet](https://www.nuget.org/packages/Arcus.Security.All/$(Build.BuildNumber))
                ```shell
                PM > Install-Package Arcus.Security.All --Version $(Build.BuildNumber)
                ```
            condition: not(contains(variables['Build.BuildNumber'], '-'))
          - task: GitHubRelease@0
            displayName: 'Create GitHub Pre-Release (Conditional Step)'
            inputs:
              gitHubConnection: 'GitHub (arcus-automation - OAuth)'
              repositoryName: 'azure-arcus/arcus.security'
              tagSource: manual
              tag: 'v$(Build.BuildNumber)'
              title: 'v$(Build.BuildNumber)'
              releaseNotesSource: input
              releaseNotes: |
                Install new version via [NuGet](https://www.nuget.org/packages/Arcus.Security.All/$(Build.BuildNumber))
                ```shell
                PM > Install-Package Arcus.Security.All --Version $(Build.BuildNumber)
                ```
              isPreRelease: true
              compareWith: 'lastRelease'
            condition: contains(variables['Build.BuildNumber'], '-')
          - task: NuGetCommand@2
            displayName: 'Push to NuGet.org'
            inputs:
              command: push
              packagesToPush: '**/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'NuGet.org'
